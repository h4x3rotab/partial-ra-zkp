// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    PARTIAL_ZK_RA_ELF, PARTIAL_ZK_RA_ID
};
use risc0_zkvm::{default_prover, LocalProver, ExecutorEnv, ExecutorImpl, Prover};
use borsh::{BorshSerialize, BorshDeserialize, from_slice, to_vec};

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    // An executor environment describes the configurations for the zkVM
    // including program inputs.
    // An default ExecutorEnv can be created like so:
    // `let env = ExecutorEnv::builder().build().unwrap();`
    // However, this `env` does not have any inputs.
    //
    // To add guest input to the executor environment, use
    // ExecutorEnvBuilder::write().
    // To access this method, you'll need to use ExecutorEnv::builder(), which
    // creates an ExecutorEnvBuilder. When you're done adding input, call
    // ExecutorEnvBuilder::build().

    // For example:
    
    let input = std::fs::read("./secrets/docker-compose.yaml").expect("error reading file");
    let env = ExecutorEnv::builder()
        .write_slice(&input)
        .build()
        .unwrap();

    // Obtain the default prover.
    println!("start to prove");
    let prover = LocalProver::new("prover");

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover
        .prove(env, PARTIAL_ZK_RA_ELF)
        .unwrap();

    // extract the receipt.
    let receipt = prove_info.receipt;

    let seralized_receipt = to_vec(&receipt).unwrap();
    std::fs::write("./proof.bin", &seralized_receipt)
        .expect("failed to write proof");

    // For example:
    let output: u8 = receipt.journal.decode().unwrap();
    println!("got output: {output}");

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt
        .verify(PARTIAL_ZK_RA_ID)
        .unwrap();
}
